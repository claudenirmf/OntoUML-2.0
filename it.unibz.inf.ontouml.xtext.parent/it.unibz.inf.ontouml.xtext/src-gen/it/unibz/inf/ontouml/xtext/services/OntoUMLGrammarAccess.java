/*
 * generated by Xtext 2.13.0
 */
package it.unibz.inf.ontouml.xtext.services;

import com.google.inject.Inject;
import com.google.inject.Singleton;
import java.util.List;
import org.eclipse.xtext.Action;
import org.eclipse.xtext.Alternatives;
import org.eclipse.xtext.Assignment;
import org.eclipse.xtext.CrossReference;
import org.eclipse.xtext.EnumLiteralDeclaration;
import org.eclipse.xtext.EnumRule;
import org.eclipse.xtext.Grammar;
import org.eclipse.xtext.GrammarUtil;
import org.eclipse.xtext.Group;
import org.eclipse.xtext.Keyword;
import org.eclipse.xtext.ParserRule;
import org.eclipse.xtext.RuleCall;
import org.eclipse.xtext.TerminalRule;
import org.eclipse.xtext.UnorderedGroup;
import org.eclipse.xtext.common.services.TerminalsGrammarAccess;
import org.eclipse.xtext.service.AbstractElementFinder.AbstractEnumRuleElementFinder;
import org.eclipse.xtext.service.AbstractElementFinder.AbstractGrammarElementFinder;
import org.eclipse.xtext.service.GrammarProvider;

@Singleton
public class OntoUMLGrammarAccess extends AbstractGrammarElementFinder {
	
	public class ModelElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "it.unibz.inf.ontouml.xtext.OntoUML.Model");
		private final Assignment cElementsAssignment = (Assignment)rule.eContents().get(1);
		private final RuleCall cElementsModelElementParserRuleCall_0 = (RuleCall)cElementsAssignment.eContents().get(0);
		
		//Model:
		//	elements+=ModelElement*;
		@Override public ParserRule getRule() { return rule; }
		
		//elements+=ModelElement*
		public Assignment getElementsAssignment() { return cElementsAssignment; }
		
		//ModelElement
		public RuleCall getElementsModelElementParserRuleCall_0() { return cElementsModelElementParserRuleCall_0; }
	}
	public class ModelElementElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "it.unibz.inf.ontouml.xtext.OntoUML.ModelElement");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cOntoUMLClassParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cRegularAssociationParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		private final RuleCall cDerivationAssociationParserRuleCall_2 = (RuleCall)cAlternatives.eContents().get(2);
		private final RuleCall cGeneralizationParserRuleCall_3 = (RuleCall)cAlternatives.eContents().get(3);
		private final RuleCall cGeneralizationSetParserRuleCall_4 = (RuleCall)cAlternatives.eContents().get(4);
		
		//ModelElement:
		//	OntoUMLClass | RegularAssociation | DerivationAssociation
		//	| Generalization | GeneralizationSet;
		@Override public ParserRule getRule() { return rule; }
		
		//OntoUMLClass | RegularAssociation | DerivationAssociation | Generalization | GeneralizationSet
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//OntoUMLClass
		public RuleCall getOntoUMLClassParserRuleCall_0() { return cOntoUMLClassParserRuleCall_0; }
		
		//RegularAssociation
		public RuleCall getRegularAssociationParserRuleCall_1() { return cRegularAssociationParserRuleCall_1; }
		
		//DerivationAssociation
		public RuleCall getDerivationAssociationParserRuleCall_2() { return cDerivationAssociationParserRuleCall_2; }
		
		//Generalization
		public RuleCall getGeneralizationParserRuleCall_3() { return cGeneralizationParserRuleCall_3; }
		
		//GeneralizationSet
		public RuleCall getGeneralizationSetParserRuleCall_4() { return cGeneralizationSetParserRuleCall_4; }
	}
	public class OntoUMLClassElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "it.unibz.inf.ontouml.xtext.OntoUML.OntoUMLClass");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Alternatives cAlternatives_0 = (Alternatives)cGroup.eContents().get(0);
		private final Keyword cClassKeyword_0_0 = (Keyword)cAlternatives_0.eContents().get(0);
		private final Group cGroup_0_1 = (Group)cAlternatives_0.eContents().get(1);
		private final Assignment c_typeAssignment_0_1_0 = (Assignment)cGroup_0_1.eContents().get(0);
		private final RuleCall c_typeEndurantTypeEnumRuleCall_0_1_0_0 = (RuleCall)c_typeAssignment_0_1_0.eContents().get(0);
		private final Keyword cClassKeyword_0_1_1 = (Keyword)cGroup_0_1.eContents().get(1);
		private final Assignment c_typeAssignment_0_2 = (Assignment)cAlternatives_0.eContents().get(2);
		private final RuleCall c_typeEndurantTypeEnumRuleCall_0_2_0 = (RuleCall)c_typeAssignment_0_2.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNameStringOrIDParserRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		private final Group cGroup_2 = (Group)cGroup.eContents().get(2);
		private final Keyword cAkaKeyword_2_0 = (Keyword)cGroup_2.eContents().get(0);
		private final Assignment cAliasAssignment_2_1 = (Assignment)cGroup_2.eContents().get(1);
		private final RuleCall cAliasStringOrIDParserRuleCall_2_1_0 = (RuleCall)cAliasAssignment_2_1.eContents().get(0);
		
		//// ';' ;
		//OntoUMLClass:
		//	('class' | _type=EndurantType 'class' | _type=EndurantType) name=StringOrID ('aka' alias=StringOrID)?;
		@Override public ParserRule getRule() { return rule; }
		
		//('class' | _type=EndurantType 'class' | _type=EndurantType) name=StringOrID ('aka' alias=StringOrID)?
		public Group getGroup() { return cGroup; }
		
		//'class' | _type=EndurantType 'class' | _type=EndurantType
		public Alternatives getAlternatives_0() { return cAlternatives_0; }
		
		//'class'
		public Keyword getClassKeyword_0_0() { return cClassKeyword_0_0; }
		
		//_type=EndurantType 'class'
		public Group getGroup_0_1() { return cGroup_0_1; }
		
		//_type=EndurantType
		public Assignment get_typeAssignment_0_1_0() { return c_typeAssignment_0_1_0; }
		
		//EndurantType
		public RuleCall get_typeEndurantTypeEnumRuleCall_0_1_0_0() { return c_typeEndurantTypeEnumRuleCall_0_1_0_0; }
		
		//'class'
		public Keyword getClassKeyword_0_1_1() { return cClassKeyword_0_1_1; }
		
		//_type=EndurantType
		public Assignment get_typeAssignment_0_2() { return c_typeAssignment_0_2; }
		
		//EndurantType
		public RuleCall get_typeEndurantTypeEnumRuleCall_0_2_0() { return c_typeEndurantTypeEnumRuleCall_0_2_0; }
		
		//name=StringOrID
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }
		
		//StringOrID
		public RuleCall getNameStringOrIDParserRuleCall_1_0() { return cNameStringOrIDParserRuleCall_1_0; }
		
		//('aka' alias=StringOrID)?
		public Group getGroup_2() { return cGroup_2; }
		
		//'aka'
		public Keyword getAkaKeyword_2_0() { return cAkaKeyword_2_0; }
		
		//alias=StringOrID
		public Assignment getAliasAssignment_2_1() { return cAliasAssignment_2_1; }
		
		//StringOrID
		public RuleCall getAliasStringOrIDParserRuleCall_2_1_0() { return cAliasStringOrIDParserRuleCall_2_1_0; }
	}
	public class RegularAssociationElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "it.unibz.inf.ontouml.xtext.OntoUML.RegularAssociation");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Alternatives cAlternatives_0 = (Alternatives)cGroup.eContents().get(0);
		private final Keyword cAssociationKeyword_0_0 = (Keyword)cAlternatives_0.eContents().get(0);
		private final Group cGroup_0_1 = (Group)cAlternatives_0.eContents().get(1);
		private final Assignment c_typeAssignment_0_1_0 = (Assignment)cGroup_0_1.eContents().get(0);
		private final RuleCall c_typeRelationTypeEnumRuleCall_0_1_0_0 = (RuleCall)c_typeAssignment_0_1_0.eContents().get(0);
		private final Keyword cAssociationKeyword_0_1_1 = (Keyword)cGroup_0_1.eContents().get(1);
		private final Assignment c_typeAssignment_0_2 = (Assignment)cAlternatives_0.eContents().get(2);
		private final RuleCall c_typeRelationTypeEnumRuleCall_0_2_0 = (RuleCall)c_typeAssignment_0_2.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNameStringOrIDParserRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		private final Group cGroup_2 = (Group)cGroup.eContents().get(2);
		private final Keyword cAkaKeyword_2_0 = (Keyword)cGroup_2.eContents().get(0);
		private final Assignment cAliasAssignment_2_1 = (Assignment)cGroup_2.eContents().get(1);
		private final RuleCall cAliasStringOrIDParserRuleCall_2_1_0 = (RuleCall)cAliasAssignment_2_1.eContents().get(0);
		private final Assignment cSourceEndAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cSourceEndAssociationEndParserRuleCall_3_0 = (RuleCall)cSourceEndAssignment_3.eContents().get(0);
		private final Assignment cSourceAssignment_4 = (Assignment)cGroup.eContents().get(4);
		private final CrossReference cSourceOntoUMLClassCrossReference_4_0 = (CrossReference)cSourceAssignment_4.eContents().get(0);
		private final RuleCall cSourceOntoUMLClassStringOrIDParserRuleCall_4_0_1 = (RuleCall)cSourceOntoUMLClassCrossReference_4_0.eContents().get(1);
		private final Assignment cTargetEndAssignment_5 = (Assignment)cGroup.eContents().get(5);
		private final RuleCall cTargetEndAssociationEndParserRuleCall_5_0 = (RuleCall)cTargetEndAssignment_5.eContents().get(0);
		private final Assignment cTargetAssignment_6 = (Assignment)cGroup.eContents().get(6);
		private final CrossReference cTargetOntoUMLClassCrossReference_6_0 = (CrossReference)cTargetAssignment_6.eContents().get(0);
		private final RuleCall cTargetOntoUMLClassStringOrIDParserRuleCall_6_0_1 = (RuleCall)cTargetOntoUMLClassCrossReference_6_0.eContents().get(1);
		
		//RegularAssociation:
		//	('association' | _type=RelationType 'association' | _type=RelationType) name=StringOrID ('aka' alias=StringOrID)?
		//	sourceEnd=AssociationEnd source=[OntoUMLClass|StringOrID] targetEnd=AssociationEnd target=[OntoUMLClass|StringOrID];
		@Override public ParserRule getRule() { return rule; }
		
		//('association' | _type=RelationType 'association' | _type=RelationType) name=StringOrID ('aka' alias=StringOrID)?
		//sourceEnd=AssociationEnd source=[OntoUMLClass|StringOrID] targetEnd=AssociationEnd target=[OntoUMLClass|StringOrID]
		public Group getGroup() { return cGroup; }
		
		//'association' | _type=RelationType 'association' | _type=RelationType
		public Alternatives getAlternatives_0() { return cAlternatives_0; }
		
		//'association'
		public Keyword getAssociationKeyword_0_0() { return cAssociationKeyword_0_0; }
		
		//_type=RelationType 'association'
		public Group getGroup_0_1() { return cGroup_0_1; }
		
		//_type=RelationType
		public Assignment get_typeAssignment_0_1_0() { return c_typeAssignment_0_1_0; }
		
		//RelationType
		public RuleCall get_typeRelationTypeEnumRuleCall_0_1_0_0() { return c_typeRelationTypeEnumRuleCall_0_1_0_0; }
		
		//'association'
		public Keyword getAssociationKeyword_0_1_1() { return cAssociationKeyword_0_1_1; }
		
		//_type=RelationType
		public Assignment get_typeAssignment_0_2() { return c_typeAssignment_0_2; }
		
		//RelationType
		public RuleCall get_typeRelationTypeEnumRuleCall_0_2_0() { return c_typeRelationTypeEnumRuleCall_0_2_0; }
		
		//name=StringOrID
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }
		
		//StringOrID
		public RuleCall getNameStringOrIDParserRuleCall_1_0() { return cNameStringOrIDParserRuleCall_1_0; }
		
		//('aka' alias=StringOrID)?
		public Group getGroup_2() { return cGroup_2; }
		
		//'aka'
		public Keyword getAkaKeyword_2_0() { return cAkaKeyword_2_0; }
		
		//alias=StringOrID
		public Assignment getAliasAssignment_2_1() { return cAliasAssignment_2_1; }
		
		//StringOrID
		public RuleCall getAliasStringOrIDParserRuleCall_2_1_0() { return cAliasStringOrIDParserRuleCall_2_1_0; }
		
		//sourceEnd=AssociationEnd
		public Assignment getSourceEndAssignment_3() { return cSourceEndAssignment_3; }
		
		//AssociationEnd
		public RuleCall getSourceEndAssociationEndParserRuleCall_3_0() { return cSourceEndAssociationEndParserRuleCall_3_0; }
		
		//source=[OntoUMLClass|StringOrID]
		public Assignment getSourceAssignment_4() { return cSourceAssignment_4; }
		
		//[OntoUMLClass|StringOrID]
		public CrossReference getSourceOntoUMLClassCrossReference_4_0() { return cSourceOntoUMLClassCrossReference_4_0; }
		
		//StringOrID
		public RuleCall getSourceOntoUMLClassStringOrIDParserRuleCall_4_0_1() { return cSourceOntoUMLClassStringOrIDParserRuleCall_4_0_1; }
		
		//targetEnd=AssociationEnd
		public Assignment getTargetEndAssignment_5() { return cTargetEndAssignment_5; }
		
		//AssociationEnd
		public RuleCall getTargetEndAssociationEndParserRuleCall_5_0() { return cTargetEndAssociationEndParserRuleCall_5_0; }
		
		//target=[OntoUMLClass|StringOrID]
		public Assignment getTargetAssignment_6() { return cTargetAssignment_6; }
		
		//[OntoUMLClass|StringOrID]
		public CrossReference getTargetOntoUMLClassCrossReference_6_0() { return cTargetOntoUMLClassCrossReference_6_0; }
		
		//StringOrID
		public RuleCall getTargetOntoUMLClassStringOrIDParserRuleCall_6_0_1() { return cTargetOntoUMLClassStringOrIDParserRuleCall_6_0_1; }
	}
	public class DerivationAssociationElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "it.unibz.inf.ontouml.xtext.OntoUML.DerivationAssociation");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cDerivationKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNameStringOrIDParserRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		private final Group cGroup_2 = (Group)cGroup.eContents().get(2);
		private final Keyword cAkaKeyword_2_0 = (Keyword)cGroup_2.eContents().get(0);
		private final Assignment cAliasAssignment_2_1 = (Assignment)cGroup_2.eContents().get(1);
		private final RuleCall cAliasStringOrIDParserRuleCall_2_1_0 = (RuleCall)cAliasAssignment_2_1.eContents().get(0);
		private final UnorderedGroup cUnorderedGroup_3 = (UnorderedGroup)cGroup.eContents().get(3);
		private final Group cGroup_3_0 = (Group)cUnorderedGroup_3.eContents().get(0);
		private final Assignment cSourceEndAssignment_3_0_0 = (Assignment)cGroup_3_0.eContents().get(0);
		private final RuleCall cSourceEndAssociationEndParserRuleCall_3_0_0_0 = (RuleCall)cSourceEndAssignment_3_0_0.eContents().get(0);
		private final Assignment cDerivingAssociationAssignment_3_0_1 = (Assignment)cGroup_3_0.eContents().get(1);
		private final CrossReference cDerivingAssociationRegularAssociationCrossReference_3_0_1_0 = (CrossReference)cDerivingAssociationAssignment_3_0_1.eContents().get(0);
		private final RuleCall cDerivingAssociationRegularAssociationStringOrIDParserRuleCall_3_0_1_0_1 = (RuleCall)cDerivingAssociationRegularAssociationCrossReference_3_0_1_0.eContents().get(1);
		private final Group cGroup_3_1 = (Group)cUnorderedGroup_3.eContents().get(1);
		private final Assignment cTargetEndAssignment_3_1_0 = (Assignment)cGroup_3_1.eContents().get(0);
		private final RuleCall cTargetEndAssociationEndParserRuleCall_3_1_0_0 = (RuleCall)cTargetEndAssignment_3_1_0.eContents().get(0);
		private final Assignment cDerivedClassAssignment_3_1_1 = (Assignment)cGroup_3_1.eContents().get(1);
		private final CrossReference cDerivedClassOntoUMLClassCrossReference_3_1_1_0 = (CrossReference)cDerivedClassAssignment_3_1_1.eContents().get(0);
		private final RuleCall cDerivedClassOntoUMLClassStringOrIDParserRuleCall_3_1_1_0_1 = (RuleCall)cDerivedClassOntoUMLClassCrossReference_3_1_1_0.eContents().get(1);
		
		//DerivationAssociation:
		//	'derivation' name=StringOrID ('aka' alias=StringOrID)? (sourceEnd=AssociationEnd
		//	derivingAssociation=[RegularAssociation|StringOrID] & targetEnd=AssociationEnd
		//	derivedClass=[OntoUMLClass|StringOrID]);
		@Override public ParserRule getRule() { return rule; }
		
		//'derivation' name=StringOrID ('aka' alias=StringOrID)? (sourceEnd=AssociationEnd
		//derivingAssociation=[RegularAssociation|StringOrID] & targetEnd=AssociationEnd derivedClass=[OntoUMLClass|StringOrID])
		public Group getGroup() { return cGroup; }
		
		//'derivation'
		public Keyword getDerivationKeyword_0() { return cDerivationKeyword_0; }
		
		//name=StringOrID
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }
		
		//StringOrID
		public RuleCall getNameStringOrIDParserRuleCall_1_0() { return cNameStringOrIDParserRuleCall_1_0; }
		
		//('aka' alias=StringOrID)?
		public Group getGroup_2() { return cGroup_2; }
		
		//'aka'
		public Keyword getAkaKeyword_2_0() { return cAkaKeyword_2_0; }
		
		//alias=StringOrID
		public Assignment getAliasAssignment_2_1() { return cAliasAssignment_2_1; }
		
		//StringOrID
		public RuleCall getAliasStringOrIDParserRuleCall_2_1_0() { return cAliasStringOrIDParserRuleCall_2_1_0; }
		
		//sourceEnd=AssociationEnd derivingAssociation=[RegularAssociation|StringOrID] & targetEnd=AssociationEnd
		//derivedClass=[OntoUMLClass|StringOrID]
		public UnorderedGroup getUnorderedGroup_3() { return cUnorderedGroup_3; }
		
		//sourceEnd=AssociationEnd derivingAssociation=[RegularAssociation|StringOrID]
		public Group getGroup_3_0() { return cGroup_3_0; }
		
		//sourceEnd=AssociationEnd
		public Assignment getSourceEndAssignment_3_0_0() { return cSourceEndAssignment_3_0_0; }
		
		//AssociationEnd
		public RuleCall getSourceEndAssociationEndParserRuleCall_3_0_0_0() { return cSourceEndAssociationEndParserRuleCall_3_0_0_0; }
		
		//derivingAssociation=[RegularAssociation|StringOrID]
		public Assignment getDerivingAssociationAssignment_3_0_1() { return cDerivingAssociationAssignment_3_0_1; }
		
		//[RegularAssociation|StringOrID]
		public CrossReference getDerivingAssociationRegularAssociationCrossReference_3_0_1_0() { return cDerivingAssociationRegularAssociationCrossReference_3_0_1_0; }
		
		//StringOrID
		public RuleCall getDerivingAssociationRegularAssociationStringOrIDParserRuleCall_3_0_1_0_1() { return cDerivingAssociationRegularAssociationStringOrIDParserRuleCall_3_0_1_0_1; }
		
		//targetEnd=AssociationEnd derivedClass=[OntoUMLClass|StringOrID]
		public Group getGroup_3_1() { return cGroup_3_1; }
		
		//targetEnd=AssociationEnd
		public Assignment getTargetEndAssignment_3_1_0() { return cTargetEndAssignment_3_1_0; }
		
		//AssociationEnd
		public RuleCall getTargetEndAssociationEndParserRuleCall_3_1_0_0() { return cTargetEndAssociationEndParserRuleCall_3_1_0_0; }
		
		//derivedClass=[OntoUMLClass|StringOrID]
		public Assignment getDerivedClassAssignment_3_1_1() { return cDerivedClassAssignment_3_1_1; }
		
		//[OntoUMLClass|StringOrID]
		public CrossReference getDerivedClassOntoUMLClassCrossReference_3_1_1_0() { return cDerivedClassOntoUMLClassCrossReference_3_1_1_0; }
		
		//StringOrID
		public RuleCall getDerivedClassOntoUMLClassStringOrIDParserRuleCall_3_1_1_0_1() { return cDerivedClassOntoUMLClassStringOrIDParserRuleCall_3_1_1_0_1; }
	}
	public class AssociationEndElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "it.unibz.inf.ontouml.xtext.OntoUML.AssociationEnd");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cAssociationEndAction_0 = (Action)cGroup.eContents().get(0);
		private final Assignment cAggregationKindAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cAggregationKindAggregationKindEnumRuleCall_1_0 = (RuleCall)cAggregationKindAssignment_1.eContents().get(0);
		private final Group cGroup_2 = (Group)cGroup.eContents().get(2);
		private final Keyword cLeftSquareBracketKeyword_2_0 = (Keyword)cGroup_2.eContents().get(0);
		private final Assignment cLowerBoundAssignment_2_1 = (Assignment)cGroup_2.eContents().get(1);
		private final RuleCall cLowerBoundCARDINALITYTerminalRuleCall_2_1_0 = (RuleCall)cLowerBoundAssignment_2_1.eContents().get(0);
		private final Keyword cFullStopFullStopKeyword_2_2 = (Keyword)cGroup_2.eContents().get(2);
		private final Assignment cUpperBoundAssignment_2_3 = (Assignment)cGroup_2.eContents().get(3);
		private final RuleCall cUpperBoundCARDINALITYTerminalRuleCall_2_3_0 = (RuleCall)cUpperBoundAssignment_2_3.eContents().get(0);
		private final Keyword cRightSquareBracketKeyword_2_4 = (Keyword)cGroup_2.eContents().get(4);
		
		//AssociationEnd:
		//	{AssociationEnd} aggregationKind=AggregationKind? ('[' lowerBound=CARDINALITY '..' upperBound=CARDINALITY ']')?;
		@Override public ParserRule getRule() { return rule; }
		
		//{AssociationEnd} aggregationKind=AggregationKind? ('[' lowerBound=CARDINALITY '..' upperBound=CARDINALITY ']')?
		public Group getGroup() { return cGroup; }
		
		//{AssociationEnd}
		public Action getAssociationEndAction_0() { return cAssociationEndAction_0; }
		
		//aggregationKind=AggregationKind?
		public Assignment getAggregationKindAssignment_1() { return cAggregationKindAssignment_1; }
		
		//AggregationKind
		public RuleCall getAggregationKindAggregationKindEnumRuleCall_1_0() { return cAggregationKindAggregationKindEnumRuleCall_1_0; }
		
		//('[' lowerBound=CARDINALITY '..' upperBound=CARDINALITY ']')?
		public Group getGroup_2() { return cGroup_2; }
		
		//'['
		public Keyword getLeftSquareBracketKeyword_2_0() { return cLeftSquareBracketKeyword_2_0; }
		
		//lowerBound=CARDINALITY
		public Assignment getLowerBoundAssignment_2_1() { return cLowerBoundAssignment_2_1; }
		
		//CARDINALITY
		public RuleCall getLowerBoundCARDINALITYTerminalRuleCall_2_1_0() { return cLowerBoundCARDINALITYTerminalRuleCall_2_1_0; }
		
		//'..'
		public Keyword getFullStopFullStopKeyword_2_2() { return cFullStopFullStopKeyword_2_2; }
		
		//upperBound=CARDINALITY
		public Assignment getUpperBoundAssignment_2_3() { return cUpperBoundAssignment_2_3; }
		
		//CARDINALITY
		public RuleCall getUpperBoundCARDINALITYTerminalRuleCall_2_3_0() { return cUpperBoundCARDINALITYTerminalRuleCall_2_3_0; }
		
		//']'
		public Keyword getRightSquareBracketKeyword_2_4() { return cRightSquareBracketKeyword_2_4; }
	}
	public class GeneralizationElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "it.unibz.inf.ontouml.xtext.OntoUML.Generalization");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cGeneralizationKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNameStringOrIDParserRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		private final Group cGroup_2 = (Group)cGroup.eContents().get(2);
		private final Keyword cAkaKeyword_2_0 = (Keyword)cGroup_2.eContents().get(0);
		private final Assignment cAliasAssignment_2_1 = (Assignment)cGroup_2.eContents().get(1);
		private final RuleCall cAliasStringOrIDParserRuleCall_2_1_0 = (RuleCall)cAliasAssignment_2_1.eContents().get(0);
		private final Assignment cGenericAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final CrossReference cGenericOntoUMLClassCrossReference_3_0 = (CrossReference)cGenericAssignment_3.eContents().get(0);
		private final RuleCall cGenericOntoUMLClassStringOrIDParserRuleCall_3_0_1 = (RuleCall)cGenericOntoUMLClassCrossReference_3_0.eContents().get(1);
		private final Assignment cSpecificAssignment_4 = (Assignment)cGroup.eContents().get(4);
		private final CrossReference cSpecificOntoUMLClassCrossReference_4_0 = (CrossReference)cSpecificAssignment_4.eContents().get(0);
		private final RuleCall cSpecificOntoUMLClassStringOrIDParserRuleCall_4_0_1 = (RuleCall)cSpecificOntoUMLClassCrossReference_4_0.eContents().get(1);
		
		//Generalization:
		//	'generalization' name=StringOrID ('aka' alias=StringOrID)?
		//	generic=[OntoUMLClass|StringOrID] specific=[OntoUMLClass|StringOrID];
		@Override public ParserRule getRule() { return rule; }
		
		//'generalization' name=StringOrID ('aka' alias=StringOrID)? generic=[OntoUMLClass|StringOrID]
		//specific=[OntoUMLClass|StringOrID]
		public Group getGroup() { return cGroup; }
		
		//'generalization'
		public Keyword getGeneralizationKeyword_0() { return cGeneralizationKeyword_0; }
		
		//name=StringOrID
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }
		
		//StringOrID
		public RuleCall getNameStringOrIDParserRuleCall_1_0() { return cNameStringOrIDParserRuleCall_1_0; }
		
		//('aka' alias=StringOrID)?
		public Group getGroup_2() { return cGroup_2; }
		
		//'aka'
		public Keyword getAkaKeyword_2_0() { return cAkaKeyword_2_0; }
		
		//alias=StringOrID
		public Assignment getAliasAssignment_2_1() { return cAliasAssignment_2_1; }
		
		//StringOrID
		public RuleCall getAliasStringOrIDParserRuleCall_2_1_0() { return cAliasStringOrIDParserRuleCall_2_1_0; }
		
		//generic=[OntoUMLClass|StringOrID]
		public Assignment getGenericAssignment_3() { return cGenericAssignment_3; }
		
		//[OntoUMLClass|StringOrID]
		public CrossReference getGenericOntoUMLClassCrossReference_3_0() { return cGenericOntoUMLClassCrossReference_3_0; }
		
		//StringOrID
		public RuleCall getGenericOntoUMLClassStringOrIDParserRuleCall_3_0_1() { return cGenericOntoUMLClassStringOrIDParserRuleCall_3_0_1; }
		
		//specific=[OntoUMLClass|StringOrID]
		public Assignment getSpecificAssignment_4() { return cSpecificAssignment_4; }
		
		//[OntoUMLClass|StringOrID]
		public CrossReference getSpecificOntoUMLClassCrossReference_4_0() { return cSpecificOntoUMLClassCrossReference_4_0; }
		
		//StringOrID
		public RuleCall getSpecificOntoUMLClassStringOrIDParserRuleCall_4_0_1() { return cSpecificOntoUMLClassStringOrIDParserRuleCall_4_0_1; }
	}
	public class GeneralizationSetElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "it.unibz.inf.ontouml.xtext.OntoUML.GeneralizationSet");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final UnorderedGroup cUnorderedGroup_0 = (UnorderedGroup)cGroup.eContents().get(0);
		private final Assignment cIsDisjointAssignment_0_0 = (Assignment)cUnorderedGroup_0.eContents().get(0);
		private final Keyword cIsDisjointDisjointKeyword_0_0_0 = (Keyword)cIsDisjointAssignment_0_0.eContents().get(0);
		private final Assignment cIsCompleteAssignment_0_1 = (Assignment)cUnorderedGroup_0.eContents().get(1);
		private final Keyword cIsCompleteCompleteKeyword_0_1_0 = (Keyword)cIsCompleteAssignment_0_1.eContents().get(0);
		private final Keyword cGeneralizationsetKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cNameAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cNameStringOrIDParserRuleCall_2_0 = (RuleCall)cNameAssignment_2.eContents().get(0);
		private final Group cGroup_3 = (Group)cGroup.eContents().get(3);
		private final Keyword cAkaKeyword_3_0 = (Keyword)cGroup_3.eContents().get(0);
		private final Assignment cAliasAssignment_3_1 = (Assignment)cGroup_3.eContents().get(1);
		private final RuleCall cAliasStringOrIDParserRuleCall_3_1_0 = (RuleCall)cAliasAssignment_3_1.eContents().get(0);
		private final Keyword cLeftCurlyBracketKeyword_4 = (Keyword)cGroup.eContents().get(4);
		private final Assignment cGeneralizationsAssignment_5 = (Assignment)cGroup.eContents().get(5);
		private final CrossReference cGeneralizationsGeneralizationCrossReference_5_0 = (CrossReference)cGeneralizationsAssignment_5.eContents().get(0);
		private final RuleCall cGeneralizationsGeneralizationStringOrIDParserRuleCall_5_0_1 = (RuleCall)cGeneralizationsGeneralizationCrossReference_5_0.eContents().get(1);
		private final Keyword cRightCurlyBracketKeyword_6 = (Keyword)cGroup.eContents().get(6);
		
		//GeneralizationSet:
		//	(isDisjoint?='disjoint'? & isComplete?='complete'?)
		//	'generalizationset' name=StringOrID ('aka' alias=StringOrID)?
		//	'{' generalizations+=[Generalization|StringOrID]* '}';
		@Override public ParserRule getRule() { return rule; }
		
		//(isDisjoint?='disjoint'? & isComplete?='complete'?) 'generalizationset' name=StringOrID ('aka' alias=StringOrID)? '{'
		//generalizations+=[Generalization|StringOrID]* '}'
		public Group getGroup() { return cGroup; }
		
		//isDisjoint?='disjoint'? & isComplete?='complete'?
		public UnorderedGroup getUnorderedGroup_0() { return cUnorderedGroup_0; }
		
		//isDisjoint?='disjoint'?
		public Assignment getIsDisjointAssignment_0_0() { return cIsDisjointAssignment_0_0; }
		
		//'disjoint'
		public Keyword getIsDisjointDisjointKeyword_0_0_0() { return cIsDisjointDisjointKeyword_0_0_0; }
		
		//isComplete?='complete'?
		public Assignment getIsCompleteAssignment_0_1() { return cIsCompleteAssignment_0_1; }
		
		//'complete'
		public Keyword getIsCompleteCompleteKeyword_0_1_0() { return cIsCompleteCompleteKeyword_0_1_0; }
		
		//'generalizationset'
		public Keyword getGeneralizationsetKeyword_1() { return cGeneralizationsetKeyword_1; }
		
		//name=StringOrID
		public Assignment getNameAssignment_2() { return cNameAssignment_2; }
		
		//StringOrID
		public RuleCall getNameStringOrIDParserRuleCall_2_0() { return cNameStringOrIDParserRuleCall_2_0; }
		
		//('aka' alias=StringOrID)?
		public Group getGroup_3() { return cGroup_3; }
		
		//'aka'
		public Keyword getAkaKeyword_3_0() { return cAkaKeyword_3_0; }
		
		//alias=StringOrID
		public Assignment getAliasAssignment_3_1() { return cAliasAssignment_3_1; }
		
		//StringOrID
		public RuleCall getAliasStringOrIDParserRuleCall_3_1_0() { return cAliasStringOrIDParserRuleCall_3_1_0; }
		
		//'{'
		public Keyword getLeftCurlyBracketKeyword_4() { return cLeftCurlyBracketKeyword_4; }
		
		//generalizations+=[Generalization|StringOrID]*
		public Assignment getGeneralizationsAssignment_5() { return cGeneralizationsAssignment_5; }
		
		//[Generalization|StringOrID]
		public CrossReference getGeneralizationsGeneralizationCrossReference_5_0() { return cGeneralizationsGeneralizationCrossReference_5_0; }
		
		//StringOrID
		public RuleCall getGeneralizationsGeneralizationStringOrIDParserRuleCall_5_0_1() { return cGeneralizationsGeneralizationStringOrIDParserRuleCall_5_0_1; }
		
		//'}'
		public Keyword getRightCurlyBracketKeyword_6() { return cRightCurlyBracketKeyword_6; }
	}
	public class StringOrIDElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "it.unibz.inf.ontouml.xtext.OntoUML.StringOrID");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cSTRINGTerminalRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cIDTerminalRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		
		//StringOrID:
		//	STRING | ID;
		@Override public ParserRule getRule() { return rule; }
		
		//STRING | ID
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//STRING
		public RuleCall getSTRINGTerminalRuleCall_0() { return cSTRINGTerminalRuleCall_0; }
		
		//ID
		public RuleCall getIDTerminalRuleCall_1() { return cIDTerminalRuleCall_1; }
	}
	
	public class EndurantTypeElements extends AbstractEnumRuleElementFinder {
		private final EnumRule rule = (EnumRule) GrammarUtil.findRuleForName(getGrammar(), "it.unibz.inf.ontouml.xtext.OntoUML.EndurantType");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final EnumLiteralDeclaration cKindEnumLiteralDeclaration_0 = (EnumLiteralDeclaration)cAlternatives.eContents().get(0);
		private final Keyword cKindKindKeyword_0_0 = (Keyword)cKindEnumLiteralDeclaration_0.eContents().get(0);
		private final EnumLiteralDeclaration cRelatorKindEnumLiteralDeclaration_1 = (EnumLiteralDeclaration)cAlternatives.eContents().get(1);
		private final Keyword cRelatorKindRelatorKindKeyword_1_0 = (Keyword)cRelatorKindEnumLiteralDeclaration_1.eContents().get(0);
		private final EnumLiteralDeclaration cModeKindEnumLiteralDeclaration_2 = (EnumLiteralDeclaration)cAlternatives.eContents().get(2);
		private final Keyword cModeKindModeKindKeyword_2_0 = (Keyword)cModeKindEnumLiteralDeclaration_2.eContents().get(0);
		private final EnumLiteralDeclaration cQualityKindEnumLiteralDeclaration_3 = (EnumLiteralDeclaration)cAlternatives.eContents().get(3);
		private final Keyword cQualityKindQualityKindKeyword_3_0 = (Keyword)cQualityKindEnumLiteralDeclaration_3.eContents().get(0);
		private final EnumLiteralDeclaration cSubkindEnumLiteralDeclaration_4 = (EnumLiteralDeclaration)cAlternatives.eContents().get(4);
		private final Keyword cSubkindSubkindKeyword_4_0 = (Keyword)cSubkindEnumLiteralDeclaration_4.eContents().get(0);
		private final EnumLiteralDeclaration cRoleEnumLiteralDeclaration_5 = (EnumLiteralDeclaration)cAlternatives.eContents().get(5);
		private final Keyword cRoleRoleKeyword_5_0 = (Keyword)cRoleEnumLiteralDeclaration_5.eContents().get(0);
		private final EnumLiteralDeclaration cPhaseEnumLiteralDeclaration_6 = (EnumLiteralDeclaration)cAlternatives.eContents().get(6);
		private final Keyword cPhasePhaseKeyword_6_0 = (Keyword)cPhaseEnumLiteralDeclaration_6.eContents().get(0);
		private final EnumLiteralDeclaration cCategoryEnumLiteralDeclaration_7 = (EnumLiteralDeclaration)cAlternatives.eContents().get(7);
		private final Keyword cCategoryCategoryKeyword_7_0 = (Keyword)cCategoryEnumLiteralDeclaration_7.eContents().get(0);
		private final EnumLiteralDeclaration cMixinEnumLiteralDeclaration_8 = (EnumLiteralDeclaration)cAlternatives.eContents().get(8);
		private final Keyword cMixinMixinKeyword_8_0 = (Keyword)cMixinEnumLiteralDeclaration_8.eContents().get(0);
		private final EnumLiteralDeclaration cRoleMixinEnumLiteralDeclaration_9 = (EnumLiteralDeclaration)cAlternatives.eContents().get(9);
		private final Keyword cRoleMixinRoleMixinKeyword_9_0 = (Keyword)cRoleMixinEnumLiteralDeclaration_9.eContents().get(0);
		private final EnumLiteralDeclaration cPhaseMixinEnumLiteralDeclaration_10 = (EnumLiteralDeclaration)cAlternatives.eContents().get(10);
		private final Keyword cPhaseMixinPhaseMixinKeyword_10_0 = (Keyword)cPhaseMixinEnumLiteralDeclaration_10.eContents().get(0);
		
		//enum EndurantType:
		//	Kind="kind" | RelatorKind="relatorKind" | ModeKind="modeKind" | QualityKind="qualityKind" | Subkind="subkind" |
		//	Role="role" | Phase="phase" | Category="category" | Mixin="mixin" | RoleMixin="roleMixin" | PhaseMixin="phaseMixin";
		public EnumRule getRule() { return rule; }
		
		//Kind="kind" | RelatorKind="relatorKind" | ModeKind="modeKind" | QualityKind="qualityKind" | Subkind="subkind" |
		//Role="role" | Phase="phase" | Category="category" | Mixin="mixin" | RoleMixin="roleMixin" | PhaseMixin="phaseMixin"
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//Kind="kind"
		public EnumLiteralDeclaration getKindEnumLiteralDeclaration_0() { return cKindEnumLiteralDeclaration_0; }
		
		//"kind"
		public Keyword getKindKindKeyword_0_0() { return cKindKindKeyword_0_0; }
		
		//RelatorKind="relatorKind"
		public EnumLiteralDeclaration getRelatorKindEnumLiteralDeclaration_1() { return cRelatorKindEnumLiteralDeclaration_1; }
		
		//"relatorKind"
		public Keyword getRelatorKindRelatorKindKeyword_1_0() { return cRelatorKindRelatorKindKeyword_1_0; }
		
		//ModeKind="modeKind"
		public EnumLiteralDeclaration getModeKindEnumLiteralDeclaration_2() { return cModeKindEnumLiteralDeclaration_2; }
		
		//"modeKind"
		public Keyword getModeKindModeKindKeyword_2_0() { return cModeKindModeKindKeyword_2_0; }
		
		//QualityKind="qualityKind"
		public EnumLiteralDeclaration getQualityKindEnumLiteralDeclaration_3() { return cQualityKindEnumLiteralDeclaration_3; }
		
		//"qualityKind"
		public Keyword getQualityKindQualityKindKeyword_3_0() { return cQualityKindQualityKindKeyword_3_0; }
		
		//Subkind="subkind"
		public EnumLiteralDeclaration getSubkindEnumLiteralDeclaration_4() { return cSubkindEnumLiteralDeclaration_4; }
		
		//"subkind"
		public Keyword getSubkindSubkindKeyword_4_0() { return cSubkindSubkindKeyword_4_0; }
		
		//Role="role"
		public EnumLiteralDeclaration getRoleEnumLiteralDeclaration_5() { return cRoleEnumLiteralDeclaration_5; }
		
		//"role"
		public Keyword getRoleRoleKeyword_5_0() { return cRoleRoleKeyword_5_0; }
		
		//Phase="phase"
		public EnumLiteralDeclaration getPhaseEnumLiteralDeclaration_6() { return cPhaseEnumLiteralDeclaration_6; }
		
		//"phase"
		public Keyword getPhasePhaseKeyword_6_0() { return cPhasePhaseKeyword_6_0; }
		
		//Category="category"
		public EnumLiteralDeclaration getCategoryEnumLiteralDeclaration_7() { return cCategoryEnumLiteralDeclaration_7; }
		
		//"category"
		public Keyword getCategoryCategoryKeyword_7_0() { return cCategoryCategoryKeyword_7_0; }
		
		//Mixin="mixin"
		public EnumLiteralDeclaration getMixinEnumLiteralDeclaration_8() { return cMixinEnumLiteralDeclaration_8; }
		
		//"mixin"
		public Keyword getMixinMixinKeyword_8_0() { return cMixinMixinKeyword_8_0; }
		
		//RoleMixin="roleMixin"
		public EnumLiteralDeclaration getRoleMixinEnumLiteralDeclaration_9() { return cRoleMixinEnumLiteralDeclaration_9; }
		
		//"roleMixin"
		public Keyword getRoleMixinRoleMixinKeyword_9_0() { return cRoleMixinRoleMixinKeyword_9_0; }
		
		//PhaseMixin="phaseMixin"
		public EnumLiteralDeclaration getPhaseMixinEnumLiteralDeclaration_10() { return cPhaseMixinEnumLiteralDeclaration_10; }
		
		//"phaseMixin"
		public Keyword getPhaseMixinPhaseMixinKeyword_10_0() { return cPhaseMixinPhaseMixinKeyword_10_0; }
	}
	public class RelationTypeElements extends AbstractEnumRuleElementFinder {
		private final EnumRule rule = (EnumRule) GrammarUtil.findRuleForName(getGrammar(), "it.unibz.inf.ontouml.xtext.OntoUML.RelationType");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final EnumLiteralDeclaration cComparativeEnumLiteralDeclaration_0 = (EnumLiteralDeclaration)cAlternatives.eContents().get(0);
		private final Keyword cComparativeComparativeKeyword_0_0 = (Keyword)cComparativeEnumLiteralDeclaration_0.eContents().get(0);
		private final EnumLiteralDeclaration cMaterialEnumLiteralDeclaration_1 = (EnumLiteralDeclaration)cAlternatives.eContents().get(1);
		private final Keyword cMaterialMaterialKeyword_1_0 = (Keyword)cMaterialEnumLiteralDeclaration_1.eContents().get(0);
		private final EnumLiteralDeclaration cHistoricalEnumLiteralDeclaration_2 = (EnumLiteralDeclaration)cAlternatives.eContents().get(2);
		private final Keyword cHistoricalHistoricalKeyword_2_0 = (Keyword)cHistoricalEnumLiteralDeclaration_2.eContents().get(0);
		private final EnumLiteralDeclaration cCharacterizationEnumLiteralDeclaration_3 = (EnumLiteralDeclaration)cAlternatives.eContents().get(3);
		private final Keyword cCharacterizationCharacterizationKeyword_3_0 = (Keyword)cCharacterizationEnumLiteralDeclaration_3.eContents().get(0);
		private final EnumLiteralDeclaration cMediationEnumLiteralDeclaration_4 = (EnumLiteralDeclaration)cAlternatives.eContents().get(4);
		private final Keyword cMediationMediationKeyword_4_0 = (Keyword)cMediationEnumLiteralDeclaration_4.eContents().get(0);
		private final EnumLiteralDeclaration cExternalDepedenceEnumLiteralDeclaration_5 = (EnumLiteralDeclaration)cAlternatives.eContents().get(5);
		private final Keyword cExternalDepedenceExternalDependenceKeyword_5_0 = (Keyword)cExternalDepedenceEnumLiteralDeclaration_5.eContents().get(0);
		
		//enum RelationType:
		//	Comparative="comparative" | Material="material" | Historical="historical" | Characterization="characterization" |
		//	Mediation="mediation" | ExternalDepedence="external dependence";
		public EnumRule getRule() { return rule; }
		
		//Comparative="comparative" | Material="material" | Historical="historical" | Characterization="characterization" |
		//Mediation="mediation" | ExternalDepedence="external dependence"
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//Comparative="comparative"
		public EnumLiteralDeclaration getComparativeEnumLiteralDeclaration_0() { return cComparativeEnumLiteralDeclaration_0; }
		
		//"comparative"
		public Keyword getComparativeComparativeKeyword_0_0() { return cComparativeComparativeKeyword_0_0; }
		
		//Material="material"
		public EnumLiteralDeclaration getMaterialEnumLiteralDeclaration_1() { return cMaterialEnumLiteralDeclaration_1; }
		
		//"material"
		public Keyword getMaterialMaterialKeyword_1_0() { return cMaterialMaterialKeyword_1_0; }
		
		//Historical="historical"
		public EnumLiteralDeclaration getHistoricalEnumLiteralDeclaration_2() { return cHistoricalEnumLiteralDeclaration_2; }
		
		//"historical"
		public Keyword getHistoricalHistoricalKeyword_2_0() { return cHistoricalHistoricalKeyword_2_0; }
		
		//Characterization="characterization"
		public EnumLiteralDeclaration getCharacterizationEnumLiteralDeclaration_3() { return cCharacterizationEnumLiteralDeclaration_3; }
		
		//"characterization"
		public Keyword getCharacterizationCharacterizationKeyword_3_0() { return cCharacterizationCharacterizationKeyword_3_0; }
		
		//Mediation="mediation"
		public EnumLiteralDeclaration getMediationEnumLiteralDeclaration_4() { return cMediationEnumLiteralDeclaration_4; }
		
		//"mediation"
		public Keyword getMediationMediationKeyword_4_0() { return cMediationMediationKeyword_4_0; }
		
		//ExternalDepedence="external dependence"
		public EnumLiteralDeclaration getExternalDepedenceEnumLiteralDeclaration_5() { return cExternalDepedenceEnumLiteralDeclaration_5; }
		
		//"external dependence"
		public Keyword getExternalDepedenceExternalDependenceKeyword_5_0() { return cExternalDepedenceExternalDependenceKeyword_5_0; }
	}
	public class AggregationKindElements extends AbstractEnumRuleElementFinder {
		private final EnumRule rule = (EnumRule) GrammarUtil.findRuleForName(getGrammar(), "it.unibz.inf.ontouml.xtext.OntoUML.AggregationKind");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final EnumLiteralDeclaration cNoneEnumLiteralDeclaration_0 = (EnumLiteralDeclaration)cAlternatives.eContents().get(0);
		private final Keyword cNoneNoneKeyword_0_0 = (Keyword)cNoneEnumLiteralDeclaration_0.eContents().get(0);
		private final EnumLiteralDeclaration cAggregationEnumLiteralDeclaration_1 = (EnumLiteralDeclaration)cAlternatives.eContents().get(1);
		private final Keyword cAggregationAggregationKeyword_1_0 = (Keyword)cAggregationEnumLiteralDeclaration_1.eContents().get(0);
		private final EnumLiteralDeclaration cCompositionEnumLiteralDeclaration_2 = (EnumLiteralDeclaration)cAlternatives.eContents().get(2);
		private final Keyword cCompositionCompositionKeyword_2_0 = (Keyword)cCompositionEnumLiteralDeclaration_2.eContents().get(0);
		
		//enum AggregationKind:
		//	None="none" | Aggregation | Composition="composition";
		public EnumRule getRule() { return rule; }
		
		//None="none" | Aggregation | Composition="composition"
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//None="none"
		public EnumLiteralDeclaration getNoneEnumLiteralDeclaration_0() { return cNoneEnumLiteralDeclaration_0; }
		
		//"none"
		public Keyword getNoneNoneKeyword_0_0() { return cNoneNoneKeyword_0_0; }
		
		//Aggregation
		public EnumLiteralDeclaration getAggregationEnumLiteralDeclaration_1() { return cAggregationEnumLiteralDeclaration_1; }
		
		//"Aggregation"
		public Keyword getAggregationAggregationKeyword_1_0() { return cAggregationAggregationKeyword_1_0; }
		
		//Composition="composition"
		public EnumLiteralDeclaration getCompositionEnumLiteralDeclaration_2() { return cCompositionEnumLiteralDeclaration_2; }
		
		//"composition"
		public Keyword getCompositionCompositionKeyword_2_0() { return cCompositionCompositionKeyword_2_0; }
	}
	
	private final ModelElements pModel;
	private final ModelElementElements pModelElement;
	private final OntoUMLClassElements pOntoUMLClass;
	private final EndurantTypeElements eEndurantType;
	private final RegularAssociationElements pRegularAssociation;
	private final DerivationAssociationElements pDerivationAssociation;
	private final RelationTypeElements eRelationType;
	private final AssociationEndElements pAssociationEnd;
	private final AggregationKindElements eAggregationKind;
	private final GeneralizationElements pGeneralization;
	private final GeneralizationSetElements pGeneralizationSet;
	private final StringOrIDElements pStringOrID;
	private final TerminalRule tCARDINALITY;
	
	private final Grammar grammar;
	
	private final TerminalsGrammarAccess gaTerminals;

	@Inject
	public OntoUMLGrammarAccess(GrammarProvider grammarProvider,
			TerminalsGrammarAccess gaTerminals) {
		this.grammar = internalFindGrammar(grammarProvider);
		this.gaTerminals = gaTerminals;
		this.pModel = new ModelElements();
		this.pModelElement = new ModelElementElements();
		this.pOntoUMLClass = new OntoUMLClassElements();
		this.eEndurantType = new EndurantTypeElements();
		this.pRegularAssociation = new RegularAssociationElements();
		this.pDerivationAssociation = new DerivationAssociationElements();
		this.eRelationType = new RelationTypeElements();
		this.pAssociationEnd = new AssociationEndElements();
		this.eAggregationKind = new AggregationKindElements();
		this.pGeneralization = new GeneralizationElements();
		this.pGeneralizationSet = new GeneralizationSetElements();
		this.pStringOrID = new StringOrIDElements();
		this.tCARDINALITY = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "it.unibz.inf.ontouml.xtext.OntoUML.CARDINALITY");
	}
	
	protected Grammar internalFindGrammar(GrammarProvider grammarProvider) {
		Grammar grammar = grammarProvider.getGrammar(this);
		while (grammar != null) {
			if ("it.unibz.inf.ontouml.xtext.OntoUML".equals(grammar.getName())) {
				return grammar;
			}
			List<Grammar> grammars = grammar.getUsedGrammars();
			if (!grammars.isEmpty()) {
				grammar = grammars.iterator().next();
			} else {
				return null;
			}
		}
		return grammar;
	}
	
	@Override
	public Grammar getGrammar() {
		return grammar;
	}
	
	
	public TerminalsGrammarAccess getTerminalsGrammarAccess() {
		return gaTerminals;
	}

	
	//Model:
	//	elements+=ModelElement*;
	public ModelElements getModelAccess() {
		return pModel;
	}
	
	public ParserRule getModelRule() {
		return getModelAccess().getRule();
	}
	
	//ModelElement:
	//	OntoUMLClass | RegularAssociation | DerivationAssociation
	//	| Generalization | GeneralizationSet;
	public ModelElementElements getModelElementAccess() {
		return pModelElement;
	}
	
	public ParserRule getModelElementRule() {
		return getModelElementAccess().getRule();
	}
	
	//// ';' ;
	//OntoUMLClass:
	//	('class' | _type=EndurantType 'class' | _type=EndurantType) name=StringOrID ('aka' alias=StringOrID)?;
	public OntoUMLClassElements getOntoUMLClassAccess() {
		return pOntoUMLClass;
	}
	
	public ParserRule getOntoUMLClassRule() {
		return getOntoUMLClassAccess().getRule();
	}
	
	//enum EndurantType:
	//	Kind="kind" | RelatorKind="relatorKind" | ModeKind="modeKind" | QualityKind="qualityKind" | Subkind="subkind" |
	//	Role="role" | Phase="phase" | Category="category" | Mixin="mixin" | RoleMixin="roleMixin" | PhaseMixin="phaseMixin";
	public EndurantTypeElements getEndurantTypeAccess() {
		return eEndurantType;
	}
	
	public EnumRule getEndurantTypeRule() {
		return getEndurantTypeAccess().getRule();
	}
	
	//RegularAssociation:
	//	('association' | _type=RelationType 'association' | _type=RelationType) name=StringOrID ('aka' alias=StringOrID)?
	//	sourceEnd=AssociationEnd source=[OntoUMLClass|StringOrID] targetEnd=AssociationEnd target=[OntoUMLClass|StringOrID];
	public RegularAssociationElements getRegularAssociationAccess() {
		return pRegularAssociation;
	}
	
	public ParserRule getRegularAssociationRule() {
		return getRegularAssociationAccess().getRule();
	}
	
	//DerivationAssociation:
	//	'derivation' name=StringOrID ('aka' alias=StringOrID)? (sourceEnd=AssociationEnd
	//	derivingAssociation=[RegularAssociation|StringOrID] & targetEnd=AssociationEnd
	//	derivedClass=[OntoUMLClass|StringOrID]);
	public DerivationAssociationElements getDerivationAssociationAccess() {
		return pDerivationAssociation;
	}
	
	public ParserRule getDerivationAssociationRule() {
		return getDerivationAssociationAccess().getRule();
	}
	
	//enum RelationType:
	//	Comparative="comparative" | Material="material" | Historical="historical" | Characterization="characterization" |
	//	Mediation="mediation" | ExternalDepedence="external dependence";
	public RelationTypeElements getRelationTypeAccess() {
		return eRelationType;
	}
	
	public EnumRule getRelationTypeRule() {
		return getRelationTypeAccess().getRule();
	}
	
	//AssociationEnd:
	//	{AssociationEnd} aggregationKind=AggregationKind? ('[' lowerBound=CARDINALITY '..' upperBound=CARDINALITY ']')?;
	public AssociationEndElements getAssociationEndAccess() {
		return pAssociationEnd;
	}
	
	public ParserRule getAssociationEndRule() {
		return getAssociationEndAccess().getRule();
	}
	
	//enum AggregationKind:
	//	None="none" | Aggregation | Composition="composition";
	public AggregationKindElements getAggregationKindAccess() {
		return eAggregationKind;
	}
	
	public EnumRule getAggregationKindRule() {
		return getAggregationKindAccess().getRule();
	}
	
	//Generalization:
	//	'generalization' name=StringOrID ('aka' alias=StringOrID)?
	//	generic=[OntoUMLClass|StringOrID] specific=[OntoUMLClass|StringOrID];
	public GeneralizationElements getGeneralizationAccess() {
		return pGeneralization;
	}
	
	public ParserRule getGeneralizationRule() {
		return getGeneralizationAccess().getRule();
	}
	
	//GeneralizationSet:
	//	(isDisjoint?='disjoint'? & isComplete?='complete'?)
	//	'generalizationset' name=StringOrID ('aka' alias=StringOrID)?
	//	'{' generalizations+=[Generalization|StringOrID]* '}';
	public GeneralizationSetElements getGeneralizationSetAccess() {
		return pGeneralizationSet;
	}
	
	public ParserRule getGeneralizationSetRule() {
		return getGeneralizationSetAccess().getRule();
	}
	
	//StringOrID:
	//	STRING | ID;
	public StringOrIDElements getStringOrIDAccess() {
		return pStringOrID;
	}
	
	public ParserRule getStringOrIDRule() {
		return getStringOrIDAccess().getRule();
	}
	
	//terminal CARDINALITY:
	//	INT | '*';
	public TerminalRule getCARDINALITYRule() {
		return tCARDINALITY;
	}
	
	//terminal ID:
	//	'^'? ('a'..'z' | 'A'..'Z' | '_') ('a'..'z' | 'A'..'Z' | '_' | '0'..'9')*;
	public TerminalRule getIDRule() {
		return gaTerminals.getIDRule();
	}
	
	//terminal INT returns ecore::EInt:
	//	'0'..'9'+;
	public TerminalRule getINTRule() {
		return gaTerminals.getINTRule();
	}
	
	//terminal STRING:
	//	'"' ('\\' . | !('\\' | '"'))* '"' |
	//	"'" ('\\' . | !('\\' | "'"))* "'";
	public TerminalRule getSTRINGRule() {
		return gaTerminals.getSTRINGRule();
	}
	
	//terminal ML_COMMENT:
	//	'/*'->'*/';
	public TerminalRule getML_COMMENTRule() {
		return gaTerminals.getML_COMMENTRule();
	}
	
	//terminal SL_COMMENT:
	//	'//' !('\n' | '\r')* ('\r'? '\n')?;
	public TerminalRule getSL_COMMENTRule() {
		return gaTerminals.getSL_COMMENTRule();
	}
	
	//terminal WS:
	//	' ' | '\t' | '\r' | '\n'+;
	public TerminalRule getWSRule() {
		return gaTerminals.getWSRule();
	}
	
	//terminal ANY_OTHER:
	//	.;
	public TerminalRule getANY_OTHERRule() {
		return gaTerminals.getANY_OTHERRule();
	}
}
