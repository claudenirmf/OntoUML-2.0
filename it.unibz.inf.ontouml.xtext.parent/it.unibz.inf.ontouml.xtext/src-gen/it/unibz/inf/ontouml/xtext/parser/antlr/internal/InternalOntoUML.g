/*
 * generated by Xtext 2.13.0
 */
grammar InternalOntoUML;

options {
	superClass=AbstractInternalAntlrParser;
}

@lexer::header {
package it.unibz.inf.ontouml.xtext.parser.antlr.internal;

// Hack: Use our own Lexer superclass by means of import. 
// Currently there is no other way to specify the superclass for the lexer.
import org.eclipse.xtext.parser.antlr.Lexer;
}

@parser::header {
package it.unibz.inf.ontouml.xtext.parser.antlr.internal;

import org.eclipse.xtext.*;
import org.eclipse.xtext.parser.*;
import org.eclipse.xtext.parser.impl.*;
import org.eclipse.emf.ecore.util.EcoreUtil;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.xtext.parser.antlr.AbstractInternalAntlrParser;
import org.eclipse.xtext.parser.antlr.XtextTokenStream;
import org.eclipse.xtext.parser.antlr.XtextTokenStream.HiddenTokens;
import org.eclipse.xtext.parser.antlr.AntlrDatatypeRuleToken;
import it.unibz.inf.ontouml.xtext.services.OntoUMLGrammarAccess;

}

@parser::members {

 	private OntoUMLGrammarAccess grammarAccess;

    public InternalOntoUMLParser(TokenStream input, OntoUMLGrammarAccess grammarAccess) {
        this(input);
        this.grammarAccess = grammarAccess;
        registerRules(grammarAccess.getGrammar());
    }

    @Override
    protected String getFirstRuleName() {
    	return "Model";
   	}

   	@Override
   	protected OntoUMLGrammarAccess getGrammarAccess() {
   		return grammarAccess;
   	}

}

@rulecatch {
    catch (RecognitionException re) {
        recover(input,re);
        appendSkippedTokens();
    }
}

// Entry rule entryRuleModel
entryRuleModel returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getModelRule()); }
	iv_ruleModel=ruleModel
	{ $current=$iv_ruleModel.current; }
	EOF;

// Rule Model
ruleModel returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			{
				$current = forceCreateModelElement(
					grammarAccess.getModelAccess().getModelAction_0(),
					$current);
			}
		)
		otherlv_1='Model'
		{
			newLeafNode(otherlv_1, grammarAccess.getModelAccess().getModelKeyword_1());
		}
		otherlv_2='{'
		{
			newLeafNode(otherlv_2, grammarAccess.getModelAccess().getLeftCurlyBracketKeyword_2());
		}
		(
			otherlv_3='elements'
			{
				newLeafNode(otherlv_3, grammarAccess.getModelAccess().getElementsKeyword_3_0());
			}
			otherlv_4='{'
			{
				newLeafNode(otherlv_4, grammarAccess.getModelAccess().getLeftCurlyBracketKeyword_3_1());
			}
			(
				(
					{
						newCompositeNode(grammarAccess.getModelAccess().getElementsModelElementParserRuleCall_3_2_0());
					}
					lv_elements_5_0=ruleModelElement
					{
						if ($current==null) {
							$current = createModelElementForParent(grammarAccess.getModelRule());
						}
						add(
							$current,
							"elements",
							lv_elements_5_0,
							"it.unibz.inf.ontouml.xtext.OntoUML.ModelElement");
						afterParserOrEnumRuleCall();
					}
				)
			)
			(
				otherlv_6=','
				{
					newLeafNode(otherlv_6, grammarAccess.getModelAccess().getCommaKeyword_3_3_0());
				}
				(
					(
						{
							newCompositeNode(grammarAccess.getModelAccess().getElementsModelElementParserRuleCall_3_3_1_0());
						}
						lv_elements_7_0=ruleModelElement
						{
							if ($current==null) {
								$current = createModelElementForParent(grammarAccess.getModelRule());
							}
							add(
								$current,
								"elements",
								lv_elements_7_0,
								"it.unibz.inf.ontouml.xtext.OntoUML.ModelElement");
							afterParserOrEnumRuleCall();
						}
					)
				)
			)*
			otherlv_8='}'
			{
				newLeafNode(otherlv_8, grammarAccess.getModelAccess().getRightCurlyBracketKeyword_3_4());
			}
		)?
		otherlv_9='}'
		{
			newLeafNode(otherlv_9, grammarAccess.getModelAccess().getRightCurlyBracketKeyword_4());
		}
	)
;

// Entry rule entryRuleModelElement
entryRuleModelElement returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getModelElementRule()); }
	iv_ruleModelElement=ruleModelElement
	{ $current=$iv_ruleModelElement.current; }
	EOF;

// Rule ModelElement
ruleModelElement returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		{
			newCompositeNode(grammarAccess.getModelElementAccess().getModelElement_ImplParserRuleCall_0());
		}
		this_ModelElement_Impl_0=ruleModelElement_Impl
		{
			$current = $this_ModelElement_Impl_0.current;
			afterParserOrEnumRuleCall();
		}
		    |
		{
			newCompositeNode(grammarAccess.getModelElementAccess().getOntoUMLClassParserRuleCall_1());
		}
		this_OntoUMLClass_1=ruleOntoUMLClass
		{
			$current = $this_OntoUMLClass_1.current;
			afterParserOrEnumRuleCall();
		}
	)
;

// Entry rule entryRuleModelElement_Impl
entryRuleModelElement_Impl returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getModelElement_ImplRule()); }
	iv_ruleModelElement_Impl=ruleModelElement_Impl
	{ $current=$iv_ruleModelElement_Impl.current; }
	EOF;

// Rule ModelElement_Impl
ruleModelElement_Impl returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			{
				$current = forceCreateModelElement(
					grammarAccess.getModelElement_ImplAccess().getModelElementAction_0(),
					$current);
			}
		)
		otherlv_1='ModelElement'
		{
			newLeafNode(otherlv_1, grammarAccess.getModelElement_ImplAccess().getModelElementKeyword_1());
		}
	)
;

// Entry rule entryRuleOntoUMLClass
entryRuleOntoUMLClass returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getOntoUMLClassRule()); }
	iv_ruleOntoUMLClass=ruleOntoUMLClass
	{ $current=$iv_ruleOntoUMLClass.current; }
	EOF;

// Rule OntoUMLClass
ruleOntoUMLClass returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			{
				$current = forceCreateModelElement(
					grammarAccess.getOntoUMLClassAccess().getOntoUMLClassAction_0(),
					$current);
			}
		)
		otherlv_1='OntoUMLClass'
		{
			newLeafNode(otherlv_1, grammarAccess.getOntoUMLClassAccess().getOntoUMLClassKeyword_1());
		}
		(
			(
				{
					newCompositeNode(grammarAccess.getOntoUMLClassAccess().getNameEStringParserRuleCall_2_0());
				}
				lv_name_2_0=ruleEString
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getOntoUMLClassRule());
					}
					set(
						$current,
						"name",
						lv_name_2_0,
						"it.unibz.inf.ontouml.xtext.OntoUML.EString");
					afterParserOrEnumRuleCall();
				}
			)
		)
	)
;

// Entry rule entryRuleEString
entryRuleEString returns [String current=null]:
	{ newCompositeNode(grammarAccess.getEStringRule()); }
	iv_ruleEString=ruleEString
	{ $current=$iv_ruleEString.current.getText(); }
	EOF;

// Rule EString
ruleEString returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		this_STRING_0=RULE_STRING
		{
			$current.merge(this_STRING_0);
		}
		{
			newLeafNode(this_STRING_0, grammarAccess.getEStringAccess().getSTRINGTerminalRuleCall_0());
		}
		    |
		this_ID_1=RULE_ID
		{
			$current.merge(this_ID_1);
		}
		{
			newLeafNode(this_ID_1, grammarAccess.getEStringAccess().getIDTerminalRuleCall_1());
		}
	)
;

RULE_ID : '^'? ('a'..'z'|'A'..'Z'|'_') ('a'..'z'|'A'..'Z'|'_'|'0'..'9')*;

RULE_INT : ('0'..'9')+;

RULE_STRING : ('"' ('\\' .|~(('\\'|'"')))* '"'|'\'' ('\\' .|~(('\\'|'\'')))* '\'');

RULE_ML_COMMENT : '/*' ( options {greedy=false;} : . )*'*/';

RULE_SL_COMMENT : '//' ~(('\n'|'\r'))* ('\r'? '\n')?;

RULE_WS : (' '|'\t'|'\r'|'\n')+;

RULE_ANY_OTHER : .;
