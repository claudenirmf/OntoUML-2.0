// automatically generated by Xtext
grammar it.unibz.inf.ontouml.xtext.OntoUML with org.eclipse.xtext.common.Terminals

import "http://www.inf.unibz.it/ontouml/xtext/xcore" 
import "http://www.eclipse.org/emf/2002/Ecore" as ecore

Model:
	elements+=ModelElement*
	;

ModelElement:
	( OntoUMLClass | RegularAssociation | DerivationAssociation 
	| Generalization | GeneralizationSet ) ;// ';' ;

OntoUMLClass returns OntoUMLClass:
	('class' | _type=EndurantType 'class' | _type=EndurantType ) name=StringOrID ('aka' alias=StringOrID)?
	;

enum EndurantType:
	Kind | RelatorKind | ModeKind
	| QualityKind | Subkind | Role | Phase
	| Category | Mixin | RoleMixin | PhaseMixin ;

RegularAssociation returns RegularAssociation:
	( 'association' | _type=RelationType 'association' | _type=RelationType ) name=StringOrID ('aka' alias=StringOrID)?
	sourceEnd=AssociationEnd source=[OntoUMLClass | StringOrID]
	targetEnd=AssociationEnd target=[OntoUMLClass | StringOrID]
	;

DerivationAssociation returns DerivationAssociation:
	'derivation' name=StringOrID ('aka' alias=StringOrID)?
	(sourceEnd=AssociationEnd derivingAssociation=[RegularAssociation | StringOrID]
	& targetEnd=AssociationEnd derivedClass=[OntoUMLClass | StringOrID])
	;

enum RelationType:
	Comparative | Material | Historical
	| Characterization | Mediation | ExternalDepedence ;

AssociationEnd returns AssociationEnd:
	{AssociationEnd} 
	(aggregationKind=AggregationKind)?
	('[' lowerBound=CARDINALITY '..' upperBound=CARDINALITY ']')?
	;

enum AggregationKind:
	None | Aggregation | Composition
	;

Generalization:
	'generalization' name=StringOrID ('aka' alias=StringOrID)?
	generic=[OntoUMLClass | StringOrID]
	specific=[OntoUMLClass | StringOrID] ;

GeneralizationSet:
	(isDisjoint?='disjoint'? & isComplete?='complete'?)
	'generalizationset' name=StringOrID ('aka' alias=StringOrID)?
	'{' generalizations+=[Generalization | StringOrID]* '}' ;

StringOrID returns ecore::EString:
	STRING | ID
;

terminal CARDINALITY returns ecore::EString: 
	INT | '*'
	;