/*
 * generated by Xtext 2.13.0
 */
package it.unibz.inf.ontouml.xtext.ide.contentassist.antlr;

import com.google.inject.Inject;
import it.unibz.inf.ontouml.xtext.ide.contentassist.antlr.internal.InternalOntoUMLParser;
import it.unibz.inf.ontouml.xtext.services.OntoUMLGrammarAccess;
import java.util.HashMap;
import java.util.Map;
import org.eclipse.xtext.AbstractElement;
import org.eclipse.xtext.ide.editor.contentassist.antlr.AbstractContentAssistParser;

public class OntoUMLParser extends AbstractContentAssistParser {

	@Inject
	private OntoUMLGrammarAccess grammarAccess;

	private Map<AbstractElement, String> nameMappings;

	@Override
	protected InternalOntoUMLParser createParser() {
		InternalOntoUMLParser result = new InternalOntoUMLParser(null);
		result.setGrammarAccess(grammarAccess);
		return result;
	}

	@Override
	protected String getRuleName(AbstractElement element) {
		if (nameMappings == null) {
			nameMappings = new HashMap<AbstractElement, String>() {
				private static final long serialVersionUID = 1L;
				{
					put(grammarAccess.getModelElementAccess().getAlternatives(), "rule__ModelElement__Alternatives");
					put(grammarAccess.getOntoUMLClassAccess().getAlternatives_0(), "rule__OntoUMLClass__Alternatives_0");
					put(grammarAccess.getRegularAssociationAccess().getAlternatives_0(), "rule__RegularAssociation__Alternatives_0");
					put(grammarAccess.getStringOrIDAccess().getAlternatives(), "rule__StringOrID__Alternatives");
					put(grammarAccess.getEndurantTypeAccess().getAlternatives(), "rule__EndurantType__Alternatives");
					put(grammarAccess.getRelationTypeAccess().getAlternatives(), "rule__RelationType__Alternatives");
					put(grammarAccess.getOntoUMLClassAccess().getGroup(), "rule__OntoUMLClass__Group__0");
					put(grammarAccess.getOntoUMLClassAccess().getGroup_0_1(), "rule__OntoUMLClass__Group_0_1__0");
					put(grammarAccess.getOntoUMLClassAccess().getGroup_2(), "rule__OntoUMLClass__Group_2__0");
					put(grammarAccess.getRegularAssociationAccess().getGroup(), "rule__RegularAssociation__Group__0");
					put(grammarAccess.getRegularAssociationAccess().getGroup_0_1(), "rule__RegularAssociation__Group_0_1__0");
					put(grammarAccess.getRegularAssociationAccess().getGroup_2(), "rule__RegularAssociation__Group_2__0");
					put(grammarAccess.getDerivationAssociationAccess().getGroup(), "rule__DerivationAssociation__Group__0");
					put(grammarAccess.getDerivationAssociationAccess().getGroup_2(), "rule__DerivationAssociation__Group_2__0");
					put(grammarAccess.getDerivationAssociationAccess().getGroup_3_0(), "rule__DerivationAssociation__Group_3_0__0");
					put(grammarAccess.getDerivationAssociationAccess().getGroup_3_1(), "rule__DerivationAssociation__Group_3_1__0");
					put(grammarAccess.getMultiplicityAccess().getGroup(), "rule__Multiplicity__Group__0");
					put(grammarAccess.getGeneralizationAccess().getGroup(), "rule__Generalization__Group__0");
					put(grammarAccess.getGeneralizationAccess().getGroup_2(), "rule__Generalization__Group_2__0");
					put(grammarAccess.getGeneralizationSetAccess().getGroup(), "rule__GeneralizationSet__Group__0");
					put(grammarAccess.getGeneralizationSetAccess().getGroup_3(), "rule__GeneralizationSet__Group_3__0");
					put(grammarAccess.getModelAccess().getElementsAssignment(), "rule__Model__ElementsAssignment");
					put(grammarAccess.getOntoUMLClassAccess().get_typeAssignment_0_1_0(), "rule__OntoUMLClass___typeAssignment_0_1_0");
					put(grammarAccess.getOntoUMLClassAccess().get_typeAssignment_0_2(), "rule__OntoUMLClass___typeAssignment_0_2");
					put(grammarAccess.getOntoUMLClassAccess().getNameAssignment_1(), "rule__OntoUMLClass__NameAssignment_1");
					put(grammarAccess.getOntoUMLClassAccess().getAliasAssignment_2_1(), "rule__OntoUMLClass__AliasAssignment_2_1");
					put(grammarAccess.getRegularAssociationAccess().get_typeAssignment_0_1_0(), "rule__RegularAssociation___typeAssignment_0_1_0");
					put(grammarAccess.getRegularAssociationAccess().get_typeAssignment_0_2(), "rule__RegularAssociation___typeAssignment_0_2");
					put(grammarAccess.getRegularAssociationAccess().getNameAssignment_1(), "rule__RegularAssociation__NameAssignment_1");
					put(grammarAccess.getRegularAssociationAccess().getAliasAssignment_2_1(), "rule__RegularAssociation__AliasAssignment_2_1");
					put(grammarAccess.getRegularAssociationAccess().getEndAMultiplicityAssignment_3(), "rule__RegularAssociation__EndAMultiplicityAssignment_3");
					put(grammarAccess.getRegularAssociationAccess().getEndAAssignment_4(), "rule__RegularAssociation__EndAAssignment_4");
					put(grammarAccess.getRegularAssociationAccess().getEndBMultiplicityAssignment_5(), "rule__RegularAssociation__EndBMultiplicityAssignment_5");
					put(grammarAccess.getRegularAssociationAccess().getEndBAssignment_6(), "rule__RegularAssociation__EndBAssignment_6");
					put(grammarAccess.getDerivationAssociationAccess().getNameAssignment_1(), "rule__DerivationAssociation__NameAssignment_1");
					put(grammarAccess.getDerivationAssociationAccess().getAliasAssignment_2_1(), "rule__DerivationAssociation__AliasAssignment_2_1");
					put(grammarAccess.getDerivationAssociationAccess().getEndAMultiplicityAssignment_3_0_0(), "rule__DerivationAssociation__EndAMultiplicityAssignment_3_0_0");
					put(grammarAccess.getDerivationAssociationAccess().getDerivingAssociationAssignment_3_0_1(), "rule__DerivationAssociation__DerivingAssociationAssignment_3_0_1");
					put(grammarAccess.getDerivationAssociationAccess().getEndBMultiplicityAssignment_3_1_0(), "rule__DerivationAssociation__EndBMultiplicityAssignment_3_1_0");
					put(grammarAccess.getDerivationAssociationAccess().getDerivedClassAssignment_3_1_1(), "rule__DerivationAssociation__DerivedClassAssignment_3_1_1");
					put(grammarAccess.getMultiplicityAccess().getLowerBoundAssignment_1(), "rule__Multiplicity__LowerBoundAssignment_1");
					put(grammarAccess.getMultiplicityAccess().getUpperBoundAssignment_3(), "rule__Multiplicity__UpperBoundAssignment_3");
					put(grammarAccess.getGeneralizationAccess().getNameAssignment_1(), "rule__Generalization__NameAssignment_1");
					put(grammarAccess.getGeneralizationAccess().getAliasAssignment_2_1(), "rule__Generalization__AliasAssignment_2_1");
					put(grammarAccess.getGeneralizationAccess().getGenericAssignment_3(), "rule__Generalization__GenericAssignment_3");
					put(grammarAccess.getGeneralizationAccess().getSpecificAssignment_4(), "rule__Generalization__SpecificAssignment_4");
					put(grammarAccess.getGeneralizationSetAccess().getIsDisjointAssignment_0_0(), "rule__GeneralizationSet__IsDisjointAssignment_0_0");
					put(grammarAccess.getGeneralizationSetAccess().getIsCompleteAssignment_0_1(), "rule__GeneralizationSet__IsCompleteAssignment_0_1");
					put(grammarAccess.getGeneralizationSetAccess().getNameAssignment_2(), "rule__GeneralizationSet__NameAssignment_2");
					put(grammarAccess.getGeneralizationSetAccess().getAliasAssignment_3_1(), "rule__GeneralizationSet__AliasAssignment_3_1");
					put(grammarAccess.getGeneralizationSetAccess().getGeneralizationsAssignment_5(), "rule__GeneralizationSet__GeneralizationsAssignment_5");
					put(grammarAccess.getDerivationAssociationAccess().getUnorderedGroup_3(), "rule__DerivationAssociation__UnorderedGroup_3");
					put(grammarAccess.getGeneralizationSetAccess().getUnorderedGroup_0(), "rule__GeneralizationSet__UnorderedGroup_0");
				}
			};
		}
		return nameMappings.get(element);
	}
			
	@Override
	protected String[] getInitialHiddenTokens() {
		return new String[] { "RULE_WS", "RULE_ML_COMMENT", "RULE_SL_COMMENT" };
	}

	public OntoUMLGrammarAccess getGrammarAccess() {
		return this.grammarAccess;
	}

	public void setGrammarAccess(OntoUMLGrammarAccess grammarAccess) {
		this.grammarAccess = grammarAccess;
	}
}
