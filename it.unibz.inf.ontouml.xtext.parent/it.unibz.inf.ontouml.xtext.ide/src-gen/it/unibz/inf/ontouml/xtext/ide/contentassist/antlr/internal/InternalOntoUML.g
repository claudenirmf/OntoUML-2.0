/*
 * generated by Xtext 2.13.0
 */
grammar InternalOntoUML;

options {
	superClass=AbstractInternalContentAssistParser;
}

@lexer::header {
package it.unibz.inf.ontouml.xtext.ide.contentassist.antlr.internal;

// Hack: Use our own Lexer superclass by means of import. 
// Currently there is no other way to specify the superclass for the lexer.
import org.eclipse.xtext.ide.editor.contentassist.antlr.internal.Lexer;
}

@parser::header {
package it.unibz.inf.ontouml.xtext.ide.contentassist.antlr.internal;

import java.io.InputStream;
import org.eclipse.xtext.*;
import org.eclipse.xtext.parser.*;
import org.eclipse.xtext.parser.impl.*;
import org.eclipse.emf.ecore.util.EcoreUtil;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.xtext.parser.antlr.XtextTokenStream;
import org.eclipse.xtext.parser.antlr.XtextTokenStream.HiddenTokens;
import org.eclipse.xtext.ide.editor.contentassist.antlr.internal.AbstractInternalContentAssistParser;
import org.eclipse.xtext.ide.editor.contentassist.antlr.internal.DFA;
import it.unibz.inf.ontouml.xtext.services.OntoUMLGrammarAccess;

}
@parser::members {
	private OntoUMLGrammarAccess grammarAccess;

	public void setGrammarAccess(OntoUMLGrammarAccess grammarAccess) {
		this.grammarAccess = grammarAccess;
	}

	@Override
	protected Grammar getGrammar() {
		return grammarAccess.getGrammar();
	}

	@Override
	protected String getValueForTokenName(String tokenName) {
		return tokenName;
	}
}

// Entry rule entryRuleModel
entryRuleModel
:
{ before(grammarAccess.getModelRule()); }
	 ruleModel
{ after(grammarAccess.getModelRule()); } 
	 EOF 
;

// Rule Model
ruleModel 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getModelAccess().getGroup()); }
		(rule__Model__Group__0)
		{ after(grammarAccess.getModelAccess().getGroup()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleModelElement
entryRuleModelElement
:
{ before(grammarAccess.getModelElementRule()); }
	 ruleModelElement
{ after(grammarAccess.getModelElementRule()); } 
	 EOF 
;

// Rule ModelElement
ruleModelElement 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getModelElementAccess().getAlternatives()); }
		(rule__ModelElement__Alternatives)
		{ after(grammarAccess.getModelElementAccess().getAlternatives()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleModelElement_Impl
entryRuleModelElement_Impl
:
{ before(grammarAccess.getModelElement_ImplRule()); }
	 ruleModelElement_Impl
{ after(grammarAccess.getModelElement_ImplRule()); } 
	 EOF 
;

// Rule ModelElement_Impl
ruleModelElement_Impl 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getModelElement_ImplAccess().getGroup()); }
		(rule__ModelElement_Impl__Group__0)
		{ after(grammarAccess.getModelElement_ImplAccess().getGroup()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleOntoUMLClass
entryRuleOntoUMLClass
:
{ before(grammarAccess.getOntoUMLClassRule()); }
	 ruleOntoUMLClass
{ after(grammarAccess.getOntoUMLClassRule()); } 
	 EOF 
;

// Rule OntoUMLClass
ruleOntoUMLClass 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getOntoUMLClassAccess().getGroup()); }
		(rule__OntoUMLClass__Group__0)
		{ after(grammarAccess.getOntoUMLClassAccess().getGroup()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleEString
entryRuleEString
:
{ before(grammarAccess.getEStringRule()); }
	 ruleEString
{ after(grammarAccess.getEStringRule()); } 
	 EOF 
;

// Rule EString
ruleEString 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getEStringAccess().getAlternatives()); }
		(rule__EString__Alternatives)
		{ after(grammarAccess.getEStringAccess().getAlternatives()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__ModelElement__Alternatives
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getModelElementAccess().getModelElement_ImplParserRuleCall_0()); }
		ruleModelElement_Impl
		{ after(grammarAccess.getModelElementAccess().getModelElement_ImplParserRuleCall_0()); }
	)
	|
	(
		{ before(grammarAccess.getModelElementAccess().getOntoUMLClassParserRuleCall_1()); }
		ruleOntoUMLClass
		{ after(grammarAccess.getModelElementAccess().getOntoUMLClassParserRuleCall_1()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__EString__Alternatives
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getEStringAccess().getSTRINGTerminalRuleCall_0()); }
		RULE_STRING
		{ after(grammarAccess.getEStringAccess().getSTRINGTerminalRuleCall_0()); }
	)
	|
	(
		{ before(grammarAccess.getEStringAccess().getIDTerminalRuleCall_1()); }
		RULE_ID
		{ after(grammarAccess.getEStringAccess().getIDTerminalRuleCall_1()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Model__Group__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Model__Group__0__Impl
	rule__Model__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Model__Group__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getModelAccess().getModelAction_0()); }
	()
	{ after(grammarAccess.getModelAccess().getModelAction_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Model__Group__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Model__Group__1__Impl
	rule__Model__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__Model__Group__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getModelAccess().getModelKeyword_1()); }
	'Model'
	{ after(grammarAccess.getModelAccess().getModelKeyword_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Model__Group__2
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Model__Group__2__Impl
	rule__Model__Group__3
;
finally {
	restoreStackSize(stackSize);
}

rule__Model__Group__2__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getModelAccess().getLeftCurlyBracketKeyword_2()); }
	'{'
	{ after(grammarAccess.getModelAccess().getLeftCurlyBracketKeyword_2()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Model__Group__3
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Model__Group__3__Impl
	rule__Model__Group__4
;
finally {
	restoreStackSize(stackSize);
}

rule__Model__Group__3__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getModelAccess().getGroup_3()); }
	(rule__Model__Group_3__0)?
	{ after(grammarAccess.getModelAccess().getGroup_3()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Model__Group__4
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Model__Group__4__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Model__Group__4__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getModelAccess().getRightCurlyBracketKeyword_4()); }
	'}'
	{ after(grammarAccess.getModelAccess().getRightCurlyBracketKeyword_4()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__Model__Group_3__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Model__Group_3__0__Impl
	rule__Model__Group_3__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Model__Group_3__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getModelAccess().getElementsKeyword_3_0()); }
	'elements'
	{ after(grammarAccess.getModelAccess().getElementsKeyword_3_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Model__Group_3__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Model__Group_3__1__Impl
	rule__Model__Group_3__2
;
finally {
	restoreStackSize(stackSize);
}

rule__Model__Group_3__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getModelAccess().getLeftCurlyBracketKeyword_3_1()); }
	'{'
	{ after(grammarAccess.getModelAccess().getLeftCurlyBracketKeyword_3_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Model__Group_3__2
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Model__Group_3__2__Impl
	rule__Model__Group_3__3
;
finally {
	restoreStackSize(stackSize);
}

rule__Model__Group_3__2__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getModelAccess().getElementsAssignment_3_2()); }
	(rule__Model__ElementsAssignment_3_2)
	{ after(grammarAccess.getModelAccess().getElementsAssignment_3_2()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Model__Group_3__3
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Model__Group_3__3__Impl
	rule__Model__Group_3__4
;
finally {
	restoreStackSize(stackSize);
}

rule__Model__Group_3__3__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getModelAccess().getGroup_3_3()); }
	(rule__Model__Group_3_3__0)*
	{ after(grammarAccess.getModelAccess().getGroup_3_3()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Model__Group_3__4
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Model__Group_3__4__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Model__Group_3__4__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getModelAccess().getRightCurlyBracketKeyword_3_4()); }
	'}'
	{ after(grammarAccess.getModelAccess().getRightCurlyBracketKeyword_3_4()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__Model__Group_3_3__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Model__Group_3_3__0__Impl
	rule__Model__Group_3_3__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Model__Group_3_3__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getModelAccess().getCommaKeyword_3_3_0()); }
	','
	{ after(grammarAccess.getModelAccess().getCommaKeyword_3_3_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Model__Group_3_3__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Model__Group_3_3__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Model__Group_3_3__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getModelAccess().getElementsAssignment_3_3_1()); }
	(rule__Model__ElementsAssignment_3_3_1)
	{ after(grammarAccess.getModelAccess().getElementsAssignment_3_3_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__ModelElement_Impl__Group__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__ModelElement_Impl__Group__0__Impl
	rule__ModelElement_Impl__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__ModelElement_Impl__Group__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getModelElement_ImplAccess().getModelElementAction_0()); }
	()
	{ after(grammarAccess.getModelElement_ImplAccess().getModelElementAction_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__ModelElement_Impl__Group__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__ModelElement_Impl__Group__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__ModelElement_Impl__Group__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getModelElement_ImplAccess().getModelElementKeyword_1()); }
	'ModelElement'
	{ after(grammarAccess.getModelElement_ImplAccess().getModelElementKeyword_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__OntoUMLClass__Group__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__OntoUMLClass__Group__0__Impl
	rule__OntoUMLClass__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__OntoUMLClass__Group__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getOntoUMLClassAccess().getOntoUMLClassAction_0()); }
	()
	{ after(grammarAccess.getOntoUMLClassAccess().getOntoUMLClassAction_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__OntoUMLClass__Group__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__OntoUMLClass__Group__1__Impl
	rule__OntoUMLClass__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__OntoUMLClass__Group__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getOntoUMLClassAccess().getOntoUMLClassKeyword_1()); }
	'OntoUMLClass'
	{ after(grammarAccess.getOntoUMLClassAccess().getOntoUMLClassKeyword_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__OntoUMLClass__Group__2
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__OntoUMLClass__Group__2__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__OntoUMLClass__Group__2__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getOntoUMLClassAccess().getNameAssignment_2()); }
	(rule__OntoUMLClass__NameAssignment_2)
	{ after(grammarAccess.getOntoUMLClassAccess().getNameAssignment_2()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__Model__ElementsAssignment_3_2
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getModelAccess().getElementsModelElementParserRuleCall_3_2_0()); }
		ruleModelElement
		{ after(grammarAccess.getModelAccess().getElementsModelElementParserRuleCall_3_2_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Model__ElementsAssignment_3_3_1
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getModelAccess().getElementsModelElementParserRuleCall_3_3_1_0()); }
		ruleModelElement
		{ after(grammarAccess.getModelAccess().getElementsModelElementParserRuleCall_3_3_1_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__OntoUMLClass__NameAssignment_2
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getOntoUMLClassAccess().getNameEStringParserRuleCall_2_0()); }
		ruleEString
		{ after(grammarAccess.getOntoUMLClassAccess().getNameEStringParserRuleCall_2_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

RULE_ID : '^'? ('a'..'z'|'A'..'Z'|'_') ('a'..'z'|'A'..'Z'|'_'|'0'..'9')*;

RULE_INT : ('0'..'9')+;

RULE_STRING : ('"' ('\\' .|~(('\\'|'"')))* '"'|'\'' ('\\' .|~(('\\'|'\'')))* '\'');

RULE_ML_COMMENT : '/*' ( options {greedy=false;} : . )*'*/';

RULE_SL_COMMENT : '//' ~(('\n'|'\r'))* ('\r'? '\n')?;

RULE_WS : (' '|'\t'|'\r'|'\n')+;

RULE_ANY_OTHER : .;
